// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Roles
  roles Role[] @default([])
  activeRole Role?

  // 1:1 profiles
  musician Musician?
  booker   Booker?

  // Activity
  reviews     Review[]
  bookings    Booking[]    @relation("BookerBookings")
  suggestions Suggestion[] @relation("UserSuggestions")

  Message Message[]
}

model Musician {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  name        String
  genres      String[] @default([])
  instruments String[] @default([])
  services    String[] @default([])

  location   String?
  bio        String?
  coverImage String?
  mediaUrls  String[] @default([])

  reviews  Review[]
  bookings Booking[] @relation("MusicianBookings")

  @@index([userId])
  Conversation Conversation[]
}

model Booker {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  name     String
  location String?
  bio      String?
  imageUrl String?

  @@index([userId])
  Conversation Conversation[]
}

model Booking {
  id         String        @id @default(cuid())
  client     User          @relation("BookerBookings", fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String
  musician   Musician      @relation("MusicianBookings", fields: [musicianId], references: [id], onDelete: Cascade)
  musicianId String
  date       DateTime
  eventType  String
  location   String
  message    String
  status     BookingStatus @default(PENDING)

  @@index([clientId])
  @@index([musicianId])
}

model Review {
  id         String   @id @default(cuid())
  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade)
  musicianId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  @@index([musicianId])
  @@index([userId])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Suggestion {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  createdAt DateTime @default(now())

  user User @relation("UserSuggestions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  MUSICIAN
  BOOKER
}

enum BookingStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

model Conversation {
  id             String     @id @default(cuid()) // auto-generate IDs
  musician       Musician   @relation(fields: [musicianId], references: [id], onDelete: Cascade)
  musicianId     String
  booker         Booker     @relation(fields: [bookerId], references: [id], onDelete: Cascade)
  bookerId       String
  readByBooker   Boolean    @default(false)
  readByMusician Boolean    @default(false)
  lastMessage    String?

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  messages       Message[]
}


model Message {
  id             String        @id @default(cuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  desc           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

