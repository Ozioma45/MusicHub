// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      Role
  musician  Musician? // if user is a musician
  bookings  Booking[] @relation("BookerBookings")
}

model Musician {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  name        String
  genre       String
  location    String
  bio         String
  mediaUrls   String[]
  reviews     Review[]
  bookings    Booking[] @relation("MusicianBookings")
}

model Booking {
  id          String   @id @default(uuid())
  client      User     @relation("BookerBookings", fields: [clientId], references: [id])
  clientId    String
  musician    Musician @relation("MusicianBookings", fields: [musicianId], references: [id])
  musicianId  String
  date        DateTime
  eventType   String
  location    String
  message     String
  status      String   // pending, accepted, declined
}

model Review {
  id          String   @id @default(uuid())
  musician    Musician @relation(fields: [musicianId], references: [id])
  musicianId  String
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
}

enum Role {
  MUSICIAN
  BOOKER
}

